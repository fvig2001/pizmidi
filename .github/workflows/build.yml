name: Build
on:
    pull_request:
        paths:
            - "CMakeLists.txt"
            - "CMakePresets.json"
            - "LICENSE.txt"
            - ".github/workflows/build.yml"
            - "packaging/**"
            - "pizjuce/**"
    push:
        branches:
            # Release branches
            - main

permissions:
    repository-projects: read

jobs:
    build:
        name: Build all Plugins
        runs-on: ${{ matrix.os }}
        strategy:
            # If the job fails for one OS, don't abort the jobs for the other OSes
            fail-fast: false
            matrix:
                os: [macos-11, ubuntu-20.04, windows-2019]
        env:
            # Unfortunately, Ccache is not available yet for Windows and MSVC
            CCACHE_AVAILABLE: ${{ matrix.os == 'macos-11' || matrix.os == 'ubuntu-20.04' }}
            CMAKE_ADDITIONAL_OPTIONS: ""
        steps:
            - name: Install toolchain (macOS)
              if: runner.os == 'macOS'
              run: |
                  brew update
                  brew install ninja
            - name: Install toolchain (Linux)
              if: runner.os == 'Linux'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y \
                    libasound2-dev libjack-jackd2-dev \
                    ladspa-sdk \
                    libcurl4-openssl-dev  \
                    libfreetype6-dev \
                    libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
                    libwebkit2gtk-4.0-dev \
                    libglu1-mesa-dev mesa-common-dev \
                    ninja-build
            - name: Checkout pizmidi
              uses: actions/checkout@v2
            - name: "Select CMake preset: mac-universal"
              if: runner.os == 'macOS'
              run: echo "CMAKE_PRESET=mac-universal" >> $GITHUB_ENV
            - name: "Select CMake preset: linux-native"
              if: runner.os == 'Linux'
              run: echo "CMAKE_PRESET=linux-native" >> $GITHUB_ENV
            - name: "Select CMake preset: windows-native"
              if: runner.os == 'Windows'
              run: echo "CMAKE_PRESET=windows-native" >> $Env:GITHUB_ENV
            - name: "Ccache"
              uses: hendrikmuhs/ccache-action@1ed7eb5b4b2afeceab143d0caa0d7fa87c33047b # v1.0.5
              if: env.CCACHE_AVAILABLE == 'true'
              with:
                  # No need to include the OS, since that is already included in CMAKE_PRESET
                  key: ${{ env.CMAKE_PRESET }}
                  max-size: 1536M
            - name: "Ccache: clear"
              # We are triggered by the "push" event in the case of release branches.
              # For these branches, no cache shall be used - but we still use the
              # Ccache compiler driver in order to build up a cache that pull requests
              # targeting this branch can use.
              if: env.CCACHE_AVAILABLE == 'true' && github.event_name == 'push'
              run: ccache --clear
            - name: "Ccache: enable compiler driver"
              if: env.CCACHE_AVAILABLE == 'true'
              run: echo "CMAKE_ADDITIONAL_OPTIONS=${{ env.CMAKE_ADDITIONAL_OPTIONS }} -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
            - name: "CMake: Configure"
              run: cmake -S . --preset=${{ env.CMAKE_PRESET }} ${{ env.CMAKE_ADDITIONAL_OPTIONS }}
            - name: "CMake: Build plugins"
              run: cmake --build --preset=${{ env.CMAKE_PRESET }} --parallel
            - name: "CMake: Build packages"
              run: cmake --build --preset=${{ env.CMAKE_PRESET }} --parallel --target package
            - name: Store packages
              uses: actions/upload-artifact@v2
              with:
                  name: packages
                  path: |
                      build/${{ env.CMAKE_PRESET }}/packages
                      !build/${{ env.CMAKE_PRESET }}/packages/_CPack_Packages
