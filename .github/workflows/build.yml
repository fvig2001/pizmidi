name: Build
on:
    pull_request:
        paths:
            - "CMakeLists.txt"
            - "CMakePresets.json"
            - "LICENSE.txt"
            - ".github/workflows/build.yml"
            - "packaging/**"
            - "pizjuce/**"
    push:
        branches:
            # Release branches
            - main

permissions:
    repository-projects: read

jobs:
    build:
        name: Plugins and Packages - ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}
        strategy:
            # If the job fails for one config, don't abort the jobs for the other configs
            fail-fast: false
            matrix:
                config:
                    - name: "macOS - universal"
                      os: "macos-11"
                      cmake_preset: "mac-universal"
                      compiler_cache: ccache
                    - name: "Ubuntu 20.04 - x86_64"
                      os: "ubuntu-20.04"
                      cmake_preset: "linux-native"
                      compiler_cache: ccache
                    - name: "Windows"
                      os: "windows-2019"
                      cmake_preset: "windows-native"
                      compiler_cache: sccache
        steps:
            - name: Install toolchain (macOS)
              if: runner.os == 'macOS'
              run: |
                  brew update
                  brew install ninja
            - name: Install toolchain (Linux)
              if: runner.os == 'Linux'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y \
                    libasound2-dev libjack-jackd2-dev \
                    ladspa-sdk \
                    libcurl4-openssl-dev  \
                    libfreetype6-dev \
                    libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
                    libwebkit2gtk-4.0-dev \
                    libglu1-mesa-dev mesa-common-dev \
                    ninja-build
            - name: Install toolchain (Windows)
              if: runner.os == 'Windows'
              run: |
                  choco install ninja
            - name: Activate Visual Studio toolchain (Windows)
              if: runner.os == 'Windows'
              uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d # v1.12.0
            - name: Checkout pizmidi
              uses: actions/checkout@v3
            - name: "Ccache"
              uses: hendrikmuhs/ccache-action@621a41397ed83711c72862638d9ff6e63fca3041 # v1.2.3
              with:
                  variant: ${{ matrix.config.compiler_cache }}
                  key: ${{ matrix.config.os }}-${{ matrix.config.cmake_preset }}
                  max-size: 1536M
            - name: "Ccache: Clear"
              # We are triggered by the "push" event in the case of release branches.
              # For these branches, no cache shall be used - but we still use the
              # Ccache compiler driver in order to build up a cache that pull requests
              # targeting this branch can use.
              if: github.event_name == 'push' && matrix.config.compiler_cache == 'ccache'
              run: ccache --clear
            - name: "CMake: Configure"
              run: >
                  cmake
                  -S .
                  --preset=${{ matrix.config.cmake_preset }}
                  -D CMAKE_C_COMPILER_LAUNCHER=${{ matrix.config.compiler_cache }}
                  -D CMAKE_CXX_COMPILER_LAUNCHER=${{ matrix.config.compiler_cache }}
            - name: "CMake: Build plugins"
              run: cmake --build --preset=${{ matrix.config.cmake_preset }} --parallel
            - name: "CMake: Build packages"
              run: cmake --build --preset=${{ matrix.config.cmake_preset }} --parallel --target package
            - name: Store packages
              uses: actions/upload-artifact@v3
              with:
                  name: packages-${{ matrix.config.os }}
                  path: |
                      build/${{ matrix.config.cmake_preset }}/packages
                      !build/${{ matrix.config.cmake_preset }}/packages/_CPack_Packages
